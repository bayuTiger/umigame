import sdk from "@api/pplx";

// 環境変数からAPIキーを取得
const API_KEY = process.env.PERPLEXITY_API_KEY;

if (!API_KEY) {
  throw new Error("API key is missing");
}

sdk.auth(API_KEY);

export const generateQuestion = async (): Promise<string> => {
  try {
    const response = await sdk.post_chat_completions({
      model: "llama-3-sonar-large-32k-chat",
      messages: [
        {
          role: "system",
          content:
            "あなたは優れた、水平思考推理ゲームの作成者です。ユーザからの指示に完璧に従います。ただ、そんなあなたでも最初から完璧に回答できるわけではないと思います。したがって自分の生成した回答を再起的に見直し、より洗練した回答を生成するために修正を繰り返す能力にも長けています。",
        },
        {
          role: "user",
          content:
            '\
              あなたは水平思考推理ゲームの問題を作成する役割を担っています。水平思考推理ゲームとは、出題者が提示する一見奇妙な状況に対して、回答者が「はい」「いいえ」「関係ありません」で答えられる質問を繰り返し、真相を推理するゲームです。\
              ### ゲームのルール \
              1. 出題者は一つの謎めいたシナリオを提示します。\
              2. 回答者は「はい」「いいえ」「関係ありません」で答えられる質問をして、シナリオの真相を解明します。\
              3. 出題者は質問に対して適切に答え、必要に応じてヒントを提供します。\
              ### 問題の構造 \
              以下のような形式で問題を作成してください：\
              - シナリオ：一見筋が通らない、奇妙な状況を描写します。\
              - 真相：シナリオの背後にある真実を説明します。\
              ### 例題 \
              以下の例題を参考にしてください。\
              - 問題例1\
                - シナリオ：ある男が海の見えるレストランで「ウミガメのスープ」を注文し、一口飲んだ後、自宅に帰って自殺しました。なぜでしょうか？\
                - 真相：男は以前、船で遭難し、他の乗客がウミガメのスープだと言って出したものを食べさせられました。それが実は人肉だったことを知り、レストランで本物のウミガメのスープを飲んでその味の違いに気づき、過去の出来事を思い出して自殺したのです。\
              - 問題例2\
                - シナリオ：ある男がホテルの部屋に入ると、すぐに窓を開けて叫びました。なぜでしょうか？\
                - 真相：男は登山家で、高山病にかかっていました。ホテルの部屋に入ったとき、気圧の変化で耳が詰まり、窓を開けて新鮮な空気を吸おうとしたのです。\
              - 問題例3\
                - シナリオ：ある女性が毎晩寝る前に靴をベッドの下に置きます。なぜでしょうか？\
                - 真相：女性は以前、火事で家を失った経験があり、緊急時にすぐに靴を履いて逃げられるようにするため、毎晩靴をベッドの下に置いているのです。\
              - 問題例4\
                - シナリオ：ある男が公園でベンチに座っていると、突然立ち上がって走り出し、川に飛び込みました。なぜでしょうか？\
                - 真相：男は盲目で、友人と一緒に公園に来ていました。友人が「犬が川に落ちた」と叫んだため、男は自分の盲導犬が危険にさらされていると思い、助けるために川に飛び込んだのです。\
              - 問題例5\
                - シナリオ：ある男が毎朝同じ時間にバス停に立っているが、バスには乗らない。なぜでしょうか？\
                - 真相：男は亡くなった妻が毎朝そのバス停から出勤していたことを思い出し、彼女を偲んで毎朝同じ時間にバス停に立っているのです。\
              ### 新しい問題を作成してください\
              - シナリオ：一見奇妙で筋が通らないユニークな問題と真相をレスポンスしてください。ただし現実的にあり得ないシチュエーションは生成しないでくださ��。超能力や未来技術などのSF要素は禁止します。\
              - 真相：その状況の背後にある真実を説明してください。\
              ### レスポンスの形式 \
              返却する前に再度自分で見直し、以下のjson形式になっているか確認してください。\
              以下のjson形式になっていない場合、以下のjson形式になるまでレスポンスを再起的に生成し直してください。\
              {\
                "quiz": "問題",\
                "scenario": "問題の答え"\
              }\
            ',
        },
      ],
    });
    if (response.data?.choices?.[0]?.message?.content) {
      return response.data.choices[0].message.content;
    } else {
      throw new Error("Invalid response structure");
    }
  } catch (error) {
    console.error("Error generating question:", error);
    throw error;
  }
};

export const answerQuestion = async (
  answer: string
): Promise<string> => {
  try {
    const response = await sdk.post_chat_completions({
      model: "llama-3-sonar-large-32k-chat",
      messages: [
        {
          role: "system",
          content:
            "あなたは自分自身が作成した水平思考推理ゲームの質問を回答する役割を担っています。水平思考推理ゲームとは、出題者が提示する一見奇妙な状況に対して、回答者が「はい」「いいえ」「関係ありません」で答えられる質問を繰り返し、真相を推理するゲームです。ただしヒントや問題の答えを求められたら素直に、わかりやすく回答してください。",
        },
        {
          role: "user",
          content: `
            あなたは水平思考推理ゲームの出題者です。ユーザーが入力した質問に対して、「はい」「いいえ」「関係ありません」の3つの回答のみを使用して答えてください。以下のガイドラインに従ってください：\
            1. 質問を正確に理解し、適切な回答を選択してください。\
            2. 基本的に回答は「はい」「いいえ」「関係ありません」のいずれかで行ってください。\
            3. ユーザがヒントを求めたら、追加のヒントや情報を提供してください。\
            4. ユーザが問題の答えを求めたら、問題の真相と解説を行ってください。\
            ### 例\
            **ユーザーの質問**：男は何かを隠していましたか？\
            **回答**：いいえ\
            **ユーザーの質問**：その場所は重要ですか？\
            **回答**：はい\
            **ユーザーの質問**：他の人が関与していますか？\
            **回答**：関係ありません\
            それでは、ユーザーの「${answer}\n」という質問に対する回答を提供してください。\
            ただし、もし「${answer}\n」という質問が問題に対するほぼ100%の回答である場合は、ゲームクリアとしてシナリオの全貌を解説してください。\
            その際、シナリオを会話形式メインで出力してください\
          `,
        },
      ],
    });
    if (response.data?.choices?.[0]?.message?.content) {
      return response.data.choices[0].message.content;
    } else {
      throw new Error("Invalid response structure");
    }
  } catch (error) {
    console.error("Error answering question:", error);
    throw error;
  }
};
